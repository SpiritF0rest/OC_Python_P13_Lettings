version: 2.1
orbs:
  python: circleci/python@2.1.1

jobs:
  install-dependencies:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - save_cache:
          key: v3-lettings-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
          paths:
            - $POETRY_CACHE_DIR
  test:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - restore_cache:
          key: v3-lettings-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run:
          name: Run tests
          command: poetry run coverage run -m pytest
      - run:
          name: Coverage report
          command: poetry run coverage report
      - run:
          name: Coverage HTML
          command: poetry run coverage html
      - store_artifacts:
          path: htmlcov

  linting:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - restore_cache:
          key: v3-lettings-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run:
          name: Linting
          command: poetry run flake8

  build-and-publish:
    docker:
      - image: cimg/base:2024.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v3-lettings-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run:
          name: Build and push application Docker image
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -t $DOCKERHUB_USERNAME/oc-lettings-site:$TAG --build-arg POETRY_CACHE_DIR=$POETRY_CACHE_DIR .
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/oc-lettings-site:$TAG

workflows:
  build-test-and-deploy:
    jobs:
      - install-dependencies
      - test:
          requires:
            - install-dependencies
      - linting:
          requires:
            - install-dependencies
      - build-and-publish:
          requires:
            - test
            - linting